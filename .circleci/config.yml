#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>
#include <Button.h>
#include "RTClib.h"
#include "Arduino.h"
#include "pulse-sensor-arduino.h"
Button button1(5);
Button button2(6);

SoftwareSerial EEBlue(10, 11); // RX | TX
#define HEARTPULSE_PIN_SIG  A0
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
RTC_DS3231 rtcDS;
PulseSensor heartpulse;
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2
#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };
#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif
#define inputCLK 2
#define inputDT 3
int currentStateCLK;
int previousStateCLK;
String options[]={"Emergency","Emergency","Timer", "Timer","Contacts", "Contacts","Test Pulse","Test Pulse"};
String emoptions[]={"Fire","","Robbery",""};
int emoptionsIndex=0;
int optionsIndex=-1;
bool fromOptions= false;
bool timerReady = false;
int timeusecount=1;

void setup() {
  Serial.begin(9600);
  EEBlue.begin(9600);
  button1.begin();
  button2.begin();
  heartpulse.begin(HEARTPULSE_PIN_SIG);
  if (! rtcDS.begin()) {
    Serial.println("Couldn't find RTC");
    //while (1);
    }
    if (rtcDS.lostPower()) {
    Serial.println("RTC lost power, lets set the time!");
    rtcDS.adjust(DateTime(2019, 11, 17, 5,32, 0));
    }
    //rtcDS.adjust(DateTime(2019, 11, 17, 5,37, 0));
  pinMode (inputCLK,INPUT);
  pinMode (inputDT,INPUT);
  previousStateCLK = digitalRead(inputCLK);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  previousStateCLK = digitalRead(inputCLK);
  
  display.clearDisplay();
       display.setTextSize(3);
       display.setTextColor(WHITE);
       display.setCursor(0,0);
       display.print("Jotayu");
       display.display();
       delay(3000);
       showTime();
}

void loop() {
  //DateTime now = rtcDS.now();
  //display.clearDisplay();
//      DateTime now = rtcDS.now();
   //   showTime();
      
  currentStateCLK = digitalRead(inputCLK);
  if (EEBlue.available())
    display.println(EEBlue.read());
  
  if (button1.pressed()){
      EEBlue.write("E");
      Serial.print("\nEmergency Signal Sent\n");
    }
  if(timerReady){
    screenDisplay("Time Out!");
    while(!button2.pressed()){;}
      screenDisplay("Done");
      Serial.print("\nDone\n");
      timerReady=false;
      delay(1000);
      showTime();
      optionsIndex = -1;
    }
    
  if(fromOptions){
    previousStateCLK = currentStateCLK;
      while(!button2.pressed()){
         currentStateCLK = digitalRead(inputCLK);
        if (currentStateCLK != previousStateCLK){ 
       
     // If the inputDT state is different than the inputCLK state then 
     // the encoder is rotating counterclockwise
            if (digitalRead(inputDT) != currentStateCLK) {
                   emoptionsIndex = emoptionsIndex+1;
                   if(emoptionsIndex > 3) emoptionsIndex =0;
                   screenDisplay(emoptions[emoptionsIndex]);
                   Serial.print('\n'+emoptions[emoptionsIndex]);
            } else {
                // Encoder is rotating clockwise     
                   emoptionsIndex = emoptionsIndex-1;
                   if(emoptionsIndex < 0) emoptionsIndex =2;
                   screenDisplay(emoptions[emoptionsIndex]);
                   Serial.print('\n'+emoptions[emoptionsIndex]);
            }
        } 
        previousStateCLK = currentStateCLK;
      }
      if(emoptionsIndex==0){
          EEBlue.write("F");
          Serial.print("\nFire Signal Sent\n");
        }
       else{
          EEBlue.write("T");
          Serial.print("\nRobbery Signal Sent\n");
        }
       fromOptions=false;
       DateTime now = rtcDS.now();
      //String month = String(now.month());
      //String day = String(now.day());
      //String year = String(now.year());
       //screenDisplay("14:26 PM\n07-11-19");
       //Serial.print("\n14:26 PM\n07-11-19\n");
       display.clearDisplay();
      //DateTime now = rtcDS.now();
       String month = String(now.month());
      String day = String(now.day());
      String year = String(now.year());
      String hour = String(now.hour());
      String munite = String(now.minute());
      screenDisplay(month+"/"+day+"/"+year+"\n        "+hour+":"+munite);
       optionsIndex=-1;
   }
  
  if (currentStateCLK != previousStateCLK){ 
      DateTime now = rtcDS.now();
      String month = String(now.month());
      String day = String(now.day());
      String year = String(now.year());
     // If the inputDT state is different than the inputCLK state then 
     // the encoder is rotating counterclockwise
     
     if (digitalRead(inputDT) != currentStateCLK) {
      optionsIndex = optionsIndex+1;
      //if(optionsIndex==-1) {screenDisplay(month+"/"+day+"/"+year);Serial.print(month+"/"+day+"/"+year);/*fromOptions=false;*/}
     //else{
       
       if(optionsIndex >7) optionsIndex =1;
       if(optionsIndex < 1) optionsIndex =8;
       Serial.print(optionsIndex);
     Serial.print("\n");
       screenDisplay(options[optionsIndex]);
       Serial.print(options[optionsIndex]+'\n');
       /*fromOptions=true;*/
     // }
     } else {
      optionsIndex = optionsIndex-1;
      //if(optionsIndex==-1) {screenDisplay(month+"/"+day+"/"+year);Serial.print(month+"/"+day+"/"+year);/*fromOptions=false;*/}
       // Encoder is rotating clockwise     
      // else{
       if(optionsIndex >7) optionsIndex =1;
       if(optionsIndex < 1) optionsIndex =8;
        Serial.print(optionsIndex);
     Serial.print("\n");
       screenDisplay(options[optionsIndex]);
       Serial.print(options[optionsIndex]+'\n');
       /*fromOptions=true;*/
      //  }
     }
     previousStateCLK = currentStateCLK;
 } 
  
  
  if (button2.pressed()){
    previousStateCLK = currentStateCLK;
       if(optionsIndex==1||optionsIndex==0){
           screenDisplay(emoptions[0]);
           Serial.print('\n'+emoptions[0]);
           fromOptions=true;
           optionsIndex==-1;
        }
        else if(optionsIndex==3||optionsIndex==2){
          int scrollIndex=0;
             while(!button2.pressed()){
               currentStateCLK = digitalRead(inputCLK);
               if (currentStateCLK != previousStateCLK){ 
                   if (digitalRead(inputDT) != currentStateCLK) {
                       scrollIndex = scrollIndex+1;
                       screenDisplay(String(scrollIndex));
                       Serial.print(scrollIndex);
                   } else {     
                       scrollIndex = scrollIndex-1;
                       screenDisplay(String(scrollIndex));
                       Serial.print(scrollIndex);
                   }
               } 
               previousStateCLK = currentStateCLK;
              }
             DateTime now = rtcDS.now();
             int hour = String(now.hour()).toInt();
             Serial.print("\nHour:");
             Serial.print(now.hour());
             int munite = String(now.minute()).toInt();
             Serial.print("\nMunite:");
             Serial.print(munite);
             int second = String(now.second()).toInt();
             Serial.print("\nSecond:");
             Serial.print(second);
             int tHour = hour+(scrollIndex)/3600;
             scrollIndex=scrollIndex%3600;
             int tMunite = munite+(scrollIndex)/60;
             scrollIndex = scrollIndex%60;
             int tSecond = second+(scrollIndex);
             screenDisplay("Timer Running!");
             while(tHour!=hour || tMunite!=munite || tSecond!=second){
              //Serial.print("\nWithin loop\n");
             now = rtcDS.now();
             hour = String(now.hour()).toInt();
             munite = String(now.minute()).toInt();
             second = String(now.second()).toInt();
              }
              Serial.print("\nTimer out!\n");
              timerReady = true;
              optionsIndex = -1;
          }
         else if(optionsIndex==5||optionsIndex==4){
           EEBlue.write("C");
           String text="";
           while(!EEBlue.available()){;}
//           int i=0;
           while(EEBlue.available()){
            text=text+(char) String(EEBlue.read()).toInt();
            //i++;
            }
           
           //text = String(EEBlue.read());
           Serial.print(text);
           screenDisplay(text);
            previousStateCLK = currentStateCLK;
      while(!button2.pressed()){
         currentStateCLK = digitalRead(inputCLK);
        if (currentStateCLK != previousStateCLK){ 
            if (digitalRead(inputDT) != currentStateCLK) {
                  EEBlue.write("C");
                  text="";
           while(!EEBlue.available()){;}
//           int i=0;
           while(EEBlue.available()){
            text=text+(char) String(EEBlue.read()).toInt();
            //i++;
            
            }
            Serial.print(text);
           screenDisplay(text);
            } else {
                EEBlue.write("C");
                text="";
           while(!EEBlue.available()){;}
//           int i=0;
           while(EEBlue.available()){
            text=text+(char) String(EEBlue.read()).toInt();
            //i++;
            }
            Serial.print(text);
           screenDisplay(text);
            }
            Serial.print("\n\n");
        } 
        
        previousStateCLK = currentStateCLK;
      }
      text = " "+text;
      char* cStr = (char*) malloc(sizeof(char)*(text.length()+1));
      text.toCharArray(cStr,text.length()+1);
      EEBlue.write(cStr);
      //EEBlue.write(" Ratan");
      Serial.print("\nMessage sent\n");
      Serial.write(cStr);
      display.clearDisplay();
      DateTime now = rtcDS.now();
       String month = String(now.month());
      String day = String(now.day());
      String year = String(now.year());
      String hour = String(now.hour());
      String munite = String(now.minute());
      screenDisplay(month+"/"+day+"/"+year+"\n        "+hour+":"+munite);
      optionsIndex=-1;
          }
          else if(optionsIndex == 7||optionsIndex ==6){
            int prevHeartRate=-456;
              while(!button2.pressed()){
                  int heartpulseBPM = heartpulse.BPM;
//                  if(heartpulseBPM == prevHeartRate){
//                     EEBlue.write("E");
//                     break;
//                    }
                  String sentence = "heart rate: "+String(heartpulseBPM)+"\n";
                  screenDisplay(sentence);
                  Serial.print(sentence);
                  delay(500);
                  prevHeartRate = heartpulseBPM;
                  if(button2.pressed()){
                    break;
                    }
                }
                display.clearDisplay();
      DateTime now = rtcDS.now();
       String month = String(now.month());
      String day = String(now.day());
      String year = String(now.year());
      String hour = String(now.hour());
      String munite = String(now.minute());
      screenDisplay(month+"/"+day+"/"+year+"\n        "+hour+":"+munite);
                optionsIndex=-1;
            }
    }
}
void showTime(){
      //screenDisplay("Time:");
      
      display.clearDisplay();
      
       DateTime now = rtcDS.now();
          
      
       String month = String(now.month());
      String day = String(now.day());
      String year = String(now.year());
      String hour = String(now.hour());
      String munite = String(now.minute());
      delay(1000);
      Serial.println(month+"/"+day+"/"+year+"\n        "+hour+":"+munite);
      screenDisplay(month+"/"+day+"/"+year+"\n        "+hour+":"+munite);
  }  
void screenDisplay(String text){
     display.clearDisplay();
       display.setTextSize(1);
       display.setTextColor(WHITE);
       display.setCursor(35,10);
       display.print(text);
       display.display();
  }
